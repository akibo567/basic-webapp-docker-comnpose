services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [internal]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: dev
    working_dir: /app
    command: ["air", "-c", ".air.toml"]  # 明示
    volumes:
      - ./api:/app:cached
      - go-mod:/go/pkg/mod   # go mod キャッシュ
      - go-build:/root/.cache/go-build
    environment:
      - GO_COMPAT=1.25
      #- GO111MODULE= on
      - CGO_ENABLED=0
      - GOTOOLCHAIN=local
      - PORT=8080
      # DB接続文字列は内部ネットワーク名で
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [internal]

  frontend:
    build:
      context: ./frontend
    environment:
      # Nextはビルド時に読み込む。公開値はNEXT_PUBLIC_*で。
      NEXT_PUBLIC_API_BASE: "/api"
      PORT: "3000"
    depends_on:
      api:
        condition: service_started
    networks: [internal]

  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - api
    ports:
      - "80:80"
      # 本番TLSは80→443リダイレクト＋証明書を別途配置
      # - "443:443"
    networks:
      - internal
      - edge

volumes:
  pgdata:
  go-mod:
  go-build:

networks:
  internal:
    internal: true
  edge:
    external: false
